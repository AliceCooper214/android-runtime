package org.nativescript.staticbindinggenerator;

import com.google.googlejavaformat.java.Formatter;
import com.google.googlejavaformat.java.FormatterException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.nativescript.staticbindinggenerator.files.FileSystemHelper;
import org.nativescript.staticbindinggenerator.files.impl.FileSystemHelperImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.InheritanceChain;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.UserProvidedClassInheritanceMetadata;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.UserProvidedClassInheritanceMetadataCollector;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericHierarchyView;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericParameters;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericsAwareClassHierarchyParser;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.impl.GenericSignatureReader;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.impl.GenericsAwareClassHierarchyParserImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.impl.UserProvidedClassInheritanceMetadataCollectorImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.InheritedMethodsCollector;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.InheritedMethodsView;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.JavaMethod;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.ReifiedJavaMethod;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.InheritedMethodsCollectorImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.JavaMethodImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.MethodSignatureReifier;
import org.nativescript.staticbindinggenerator.generating.writing.ClassWriter;
import org.nativescript.staticbindinggenerator.generating.writing.FieldsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.ImportsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.MethodsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.PackageNameWriter;
import org.nativescript.staticbindinggenerator.generating.writing.impl.ClassWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.FieldsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.ImportsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.MethodsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.PackageNameWriterImpl;
import org.nativescript.staticbindinggenerator.naming.BcelNamingUtil;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.AndroidClassChecker;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.ImplementationObjectChecker;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.impl.AndroidClassCheckerImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.impl.ImplementationObjectCheckerImpl;

public class Generator {

    private static final String BASE_JAVA_CLASS_NAME = "java.lang.Object";

    private static final String JAVA_EXT = ".java";

    private static final String CLASS_EXT = ".class";

    private static final String DEFAULT_PACKAGE_NAME = "com.tns.gen";

    private static final String LINE_SEPARATOR = System.getProperty("line.separator");

    public static final String AUTO_GENERATED_FILE_PROLOGUE =
            "/* AUTO-GENERATED FILE. DO NOT MODIFY." + LINE_SEPARATOR +
                    " * This class was automatically generated by the" + LINE_SEPARATOR +
                    " * static binding generator from the resources it found." + LINE_SEPARATOR +
                    " * Please do not modify by hand." + LINE_SEPARATOR +
                    " */" + LINE_SEPARATOR;

    private final File outputDir;
    private final List<DataRow> libs;
    private final Map<String, JavaClass> classes;
    private final FileSystemHelper fileSystemHelper;
    private final boolean suppressCallJSMethodExceptions;
    private final AndroidClassChecker androidClassChecker;

    public Generator(File outputDir, List<DataRow> libs) throws IOException {
        this(outputDir, libs, false, false);
    }

    public Generator(File outputDir, List<DataRow> libs, boolean suppressCallJSMethodExceptions, boolean throwOnError) throws IOException {
        this.outputDir = outputDir;
        this.libs = libs;
        this.fileSystemHelper = new FileSystemHelperImpl(throwOnError);
        this.classes = readClasses(libs);
        androidClassChecker = new AndroidClassCheckerImpl(classes);
        this.suppressCallJSMethodExceptions = suppressCallJSMethodExceptions;
    }

    public void writeBindings(String filename) throws IOException, ClassNotFoundException {
        fileSystemHelper.cleanPreviouslyAutoGeneratedSbgFiles(this.outputDir);
        Binding[] bindings = generateBindings(filename);
        Set<File> writtenFiles = new HashSet<File>();
        for (Binding b : bindings) {
            if (writtenFiles.add(b.getFile())) {
                try (PrintStream ps = new PrintStream(b.getFile())) {
                    ps.append(AUTO_GENERATED_FILE_PROLOGUE);
                    ps.append(b.getContent());
                }
                // A file with that name has already been written
            } else {
                // Compare text contents for equality
                String content = new String(Files.readAllBytes(Paths.get(b.getFile().toString())));
                if (content.equals(b.getContent())) {
                    System.out.println("Warning: File already exists. This could mean the same code has been parsed more than once from two or more different files. \nFile:" + b.getFile());
                } else {
                    throw new IOException("File already exists. This may lead to undesired behavior.\nPlease change the name of one of the extended classes.\nFile:" + b.getFile() + " Class: " + b.getClassname());
                }
            }
        }
    }

    public Binding[] generateBindings(String filename) throws IOException, ClassNotFoundException {
        List<DataRow> rows = getRows(filename);

        Binding[] generatedFiles = processRows(rows);

        return generatedFiles;
    }

    public Binding generateBinding(DataRow dataRow, HashSet<String> interfaceNames) throws ClassNotFoundException {
        JavaClass clazz = getClass(dataRow.getBaseClassname());

        boolean hasSpecifiedName = !dataRow.getFilename().isEmpty();
        String packageName = hasSpecifiedName ? getBaseDir(dataRow.getFilename()) : (DEFAULT_PACKAGE_NAME + "." + clazz.getPackageName());
        String baseDirPath = packageName.replace('.', '/');

        File baseDir = new File(outputDir, baseDirPath);
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }

        String name = "";
        Boolean isInterface = clazz.isInterface();

        if (hasSpecifiedName) {
            name = getSimpleClassname(dataRow.getFilename());
        } else {
            if (isInterface) {
                name = getSimpleClassname(clazz.getClassName());
            } else {
                name = getSimpleClassname(clazz.getClassName().replace("$", "_")) + "_";
                // name of the class: last portion of the full file name + line + column + variable name
                String[] lastFilePathPart = dataRow.getFile().split("_");
                name += lastFilePathPart[lastFilePathPart.length - 1] + "_" + dataRow.getLine() + "_" + dataRow.getColumn() + "_" + dataRow.getNewClassName();
            }
        }

        if (isInterface && interfaceNames.contains(name)) {
            return null;
        } else if (isInterface) {
            interfaceNames.add(name);
        }

        String normalizedName = getNormalizedName(name);

        Writer w = new Writer();

        writeBinding(w, dataRow, clazz, packageName, name);

        String classname = dataRow.getFilename();

        try {
            String formattedSource = new Formatter().formatSource(w.toString());
            return new Binding(new File(baseDir, normalizedName + JAVA_EXT), formattedSource, classname);
        } catch (FormatterException e) {
            return new Binding(new File(baseDir, normalizedName + JAVA_EXT), w.toString(), classname);
        }


    }

    public Binding generateBinding(DataRow dataRow) throws ClassNotFoundException {
        return generateBinding(dataRow, new HashSet<String>());
    }

    public static List<DataRow> getRows(String filename) throws IOException {
        List<DataRow> rows = new ArrayList<DataRow>();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(filename)));
            String line;
            while ((line = br.readLine()) != null) {
                DataRow row = new DataRow(line);
                rows.add(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                br.close();
            }
        }
        return rows;
    }

    private Binding[] processRows(List<DataRow> rows) throws IOException, ClassNotFoundException {
        ArrayList<Binding> bindings = new ArrayList<Binding>();
        HashSet<String> interfaceNames = new HashSet<String>();

        for (DataRow dataRow : rows) {
            String classname = dataRow.getBaseClassname();
            boolean isJavaExtend = classes.containsKey(classname);
            if (isJavaExtend) {
                Binding binding = generateBinding(dataRow, interfaceNames);

                if (binding != null) {
                    bindings.add(binding);
                }
            }
        }

        return bindings.toArray(new Binding[bindings.size()]);
    }

    private String getNormalizedName(String filename) {
        StringBuilder sb = new StringBuilder(filename.length());
        for (char ch : filename.toCharArray()) {
            char c = Character.isJavaIdentifierPart(ch) ? ch : '_';
            sb.append(c);
        }

        return sb.toString();
    }

    private Map<String, JavaClass> readClasses(List<DataRow> libs) {
        Map<String, JavaClass> map = new HashMap<String, JavaClass>();
        //libs.add(new DataRow("/Users/vmutafov/work/android_runtime/android-runtime/test-app/app/src/main/java/com/tns/tests/interfaces/defaultmethods/contract/"));
        if (libs != null) {
            for (DataRow dr : libs) {
                String lib = dr.getRow();
                File f = new File(lib);
                Map<String, JavaClass> classes = f.isFile() ? fileSystemHelper.readClassesFromJar(lib) : fileSystemHelper.readClassesFromDirectory(lib);
                map.putAll(classes);
            }
        }
        return map;
    }


    private String getBaseDir(String classname) {
        int idx = classname.lastIndexOf('.');
        String baseDir = classname.substring(0, idx);
        return baseDir;
    }

    private String getSimpleClassname(String classname) {
        int idx = classname.lastIndexOf('.');
        String name = classname.substring(idx + 1, classname.length()).replace("$", "_");
        return name;
    }

    private void writeBinding(Writer w, DataRow dataRow, JavaClass clazz, String packageName, String name) {
        InheritanceChain inheritanceChain = tryGetInheritanceChain("/Users/vmutafov/work/classViews.txt", dataRow.getFilename());
        writePackageNameToWriter(w, packageName);
        writeImportsToWriter(w, clazz, packageName);
        writeClassBeginningToWriter(w, clazz, dataRow.getInterfaces(), name, dataRow, inheritanceChain);
        writeFieldsToWriter(w, clazz);

        GenericHierarchyView genView = new GenericsAwareClassHierarchyParserImpl(new GenericSignatureReader(), inheritanceChain, classes).getClassHierarchy(clazz);
        writeConstructorsToWriter(w, clazz, dataRow, name, genView);
        writeMethodsToWriter(w, genView, clazz, Arrays.asList(dataRow.getMethods()), Arrays.asList(dataRow.getInterfaces()), packageName);
        writeClassEndToWriter(w);
    }

    private InheritanceChain tryGetInheritanceChain(String filePath, String userClassName) {
        return null;
//        UserProvidedClassInheritanceMetadataCollector userProvidedClassInheritanceMetadataCollector = new UserProvidedClassInheritanceMetadataCollectorImpl(filePath);
//        UserProvidedClassInheritanceMetadata userProvidedClassInheritanceMetadata = userProvidedClassInheritanceMetadataCollector.collect();
//        InheritanceChain inheritanceChain = userProvidedClassInheritanceMetadata.getInheritanceChainForClass(userClassName);
//        return inheritanceChain;
    }

    private void writeClassBeginningToWriter(Writer writer, JavaClass clazz, String[] implementedInterfacesNames, String generatedClassName, DataRow dataRow, InheritanceChain inheritanceChain) {
        ClassWriter classWriter = new ClassWriterImpl(writer);
        String extendedClassName;
        if (inheritanceChain == null) {
            extendedClassName = BcelNamingUtil.resolveClassName(clazz.getClassName());
        } else {
            extendedClassName = inheritanceChain.getExtendedClass();
        }

        boolean hasCustomJsName = !dataRow.getFilename().isEmpty();

        if (hasCustomJsName) {
            if (clazz.isInterface()) { // extending an interface
                classWriter.writeBeginningOfNamedClassImplementingSingleInterface(generatedClassName, dataRow.getJsFilename(), extendedClassName);
            } else {
                classWriter.writeBeginningOfNamedChildClass(generatedClassName, dataRow.getJsFilename(), extendedClassName, Arrays.asList(implementedInterfacesNames));
            }
        } else {
            if (clazz.isInterface()) { // extending an interface
                classWriter.writeBeginningOfClassImplementingSingleInterface(generatedClassName, extendedClassName);
            } else {
                classWriter.writeBeginningOfChildClass(generatedClassName, extendedClassName, Arrays.asList(implementedInterfacesNames));
            }
        }
    }

    private void writeImportsToWriter(Writer writer, JavaClass clazz, String packageName) {
        ImportsWriter importsWriter = new ImportsWriterImpl(writer);

        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);

        if (isApplicationClass && !packageName.equals("com.tns")) {
            importsWriter.writeRuntimeHelperImport();
            importsWriter.writeRuntimeImport();
        }
    }

    private void writePackageNameToWriter(Writer writer, String packageName) {
        PackageNameWriter packageNameWriter = new PackageNameWriterImpl(writer);
        packageNameWriter.writePackageName(packageName);
    }

    private void writeFieldsToWriter(Writer writer, JavaClass clazz) {
        FieldsWriter fieldsWriter = new FieldsWriterImpl(writer);
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);

        if (isApplicationClass) {
            String normalizedClassName = BcelNamingUtil.resolveClassName(clazz.getClassName());
            fieldsWriter.writeStaticThizField(normalizedClassName);
        }
    }

    private void writeConstructorsToWriter(Writer writer, JavaClass clazz, DataRow dataRow, String generatedClassName, GenericHierarchyView genericHierarchyView) {
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);
        MethodSignatureReifier methodSignatureReifier = new MethodSignatureReifier(genericHierarchyView);
        MethodsWriter methodsWriter = new MethodsWriterImpl(writer, suppressCallJSMethodExceptions, isApplicationClass);
        ImplementationObjectChecker implementationObjectChecker = new ImplementationObjectCheckerImpl();

        List<String> implObjectMethods = Arrays.asList(dataRow.getMethods());
        boolean hasInitMethod = implementationObjectChecker.hasInitMethod(implObjectMethods);
        boolean hasInitMethod2 = !isApplicationClass && hasInitMethod;

        boolean isInterface = clazz.isInterface();
        if (isInterface) {
            methodsWriter.writeDefaultConstructor(generatedClassName);
        } else {
            for (Method method : clazz.getMethods()) {
                if (method.getName().equals("<init>") && (method.isPublic() || method.isProtected())) {
                    JavaMethod javaMethod = new JavaMethodImpl(method, clazz);
                    ReifiedJavaMethod reifiedJavaMethod = methodSignatureReifier.transformJavaMethod(javaMethod);
                    methodsWriter.writeConstructor(generatedClassName, reifiedJavaMethod, hasInitMethod2);
                }
            }
        }
    }

    private void writeMethodsToWriter(Writer writer, GenericHierarchyView genericHierarchyView, JavaClass clazz, List<String> userImplementedMethods, List<String> userImplementedInterfacesNames, String packageName) {
        boolean isInterface = clazz.isInterface();
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);

        MethodsWriter methodsWriter = new MethodsWriterImpl(writer, suppressCallJSMethodExceptions, isApplicationClass);

        List<JavaClass> userImplementedInterfaces = getInterfacesFromCache(userImplementedInterfacesNames);
        InheritedMethodsCollector inheritedMethodsCollector = new InheritedMethodsCollectorImpl.Builder()
                .forJavaClass(clazz)
                .withClassesCache(classes)
                .withAdditionalImplementedInterfaces(userImplementedInterfaces)
                .withGenericHierarchyView(genericHierarchyView)
                .withPackageName(packageName)
                .build();

        InheritedMethodsView inheritedMethodsView = inheritedMethodsCollector.collect();


        for (ReifiedJavaMethod abstractMethod : inheritedMethodsView.getNonImplementedMethods()) {
            writer.writeln();
            writer.writeln();
            methodsWriter.writeMethod(abstractMethod);
        }

        for (ReifiedJavaMethod overridableMethod : inheritedMethodsView.getOverridableImplementedMethods()) {
            for (String userImplementedMethodName : userImplementedMethods) {
                if (overridableMethod.getName().equals(userImplementedMethodName)) {

                    System.out.println("!!!!! origin: for: " + overridableMethod.getName() + " === " + overridableMethod.getDeclaringClassName());
                    writer.writeln();
                    writer.writeln();
                    methodsWriter.writeMethod(overridableMethod);
                }
            }
        }


        if (isApplicationClass) {
            String normalizedClassName = BcelNamingUtil.resolveClassName(clazz.getClassName());
            methodsWriter.writeGetInstanceMethod(normalizedClassName);
        }

        if (!isInterface) {
            methodsWriter.writeInternalRuntimeHashCodeMethod();
            methodsWriter.writeInternalRuntimeEqualsMethod();
        }
    }

    private List<JavaClass> getInterfacesFromCache(List<String> interfacesNames) {
        List<JavaClass> interfaces = new ArrayList<>(interfacesNames.size());

        for (String interfaceName : interfacesNames) {
            if (interfaceName != null && !interfaceName.equals("")) {
                JavaClass interfaze = getClass(interfaceName);
                interfaces.add(interfaze);
            }
        }

        return interfaces;
    }

    private void writeClassEndToWriter(Writer writer) {
        ClassWriter classWriter = new ClassWriterImpl(writer);
        classWriter.writeClassEnd();
    }

    private JavaClass getClass(String className) {
        JavaClass clazz = classes.get(BcelNamingUtil.resolveClassName(className));

        if (clazz == null) {
            throw new RuntimeException("Class not found " + className);
        }

        return clazz;
    }
}
