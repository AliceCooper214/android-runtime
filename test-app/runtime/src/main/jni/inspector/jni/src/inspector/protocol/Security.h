// This file is generated by TypeBuilder_h.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef v8_inspector_protocol_Security_h
#define v8_inspector_protocol_Security_h

#include "src/inspector/protocol/Protocol.h"
// For each imported domain we generate a ValueConversions struct instead of a full domain definition
// and include Domain::API version from there.

namespace v8_inspector {
namespace protocol {
namespace Security {
using CertificateId = int;
using MixedContentType = String;
using SecurityState = String;
class SecurityStateExplanation;
class InsecureContentStatus;

// ------------- Forward and enum declarations.

namespace MixedContentTypeEnum {
 extern const char Blockable[];
 extern const char OptionallyBlockable[];
 extern const char None[];
} // namespace MixedContentTypeEnum

namespace SecurityStateEnum {
 extern const char Unknown[];
 extern const char Neutral[];
 extern const char Insecure[];
 extern const char Secure[];
 extern const char Info[];
} // namespace SecurityStateEnum

// ------------- Type and builder declarations.

class  SecurityStateExplanation : public ::v8_crdtp::ProtocolObject<SecurityStateExplanation> {
public:
    ~SecurityStateExplanation() override { }

    String getSecurityState() { return m_securityState; }
    void setSecurityState(const String& value) { m_securityState = value; }

    String getTitle() { return m_title; }
    void setTitle(const String& value) { m_title = value; }

    String getSummary() { return m_summary; }
    void setSummary(const String& value) { m_summary = value; }

    String getDescription() { return m_description; }
    void setDescription(const String& value) { m_description = value; }

    String getMixedContentType() { return m_mixedContentType; }
    void setMixedContentType(const String& value) { m_mixedContentType = value; }

    protocol::Array<String>* getCertificate() { return m_certificate.get(); }
    void setCertificate(std::unique_ptr<protocol::Array<String>> value) { m_certificate = std::move(value); }

    bool hasRecommendations() { return m_recommendations.isJust(); }
    protocol::Array<String>* getRecommendations(protocol::Array<String>* defaultValue) { return m_recommendations.isJust() ? m_recommendations.fromJust() : defaultValue; }
    void setRecommendations(std::unique_ptr<protocol::Array<String>> value) { m_recommendations = std::move(value); }

    template<int STATE>
    class SecurityStateExplanationBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            SecurityStateSet = 1 << 1,
            TitleSet = 1 << 2,
            SummarySet = 1 << 3,
            DescriptionSet = 1 << 4,
            MixedContentTypeSet = 1 << 5,
            CertificateSet = 1 << 6,
            AllFieldsSet = (SecurityStateSet | TitleSet | SummarySet | DescriptionSet | MixedContentTypeSet | CertificateSet | 0)};


        SecurityStateExplanationBuilder<STATE | SecurityStateSet>& setSecurityState(const String& value)
        {
            static_assert(!(STATE & SecurityStateSet), "property securityState should not be set yet");
            m_result->setSecurityState(value);
            return castState<SecurityStateSet>();
        }

        SecurityStateExplanationBuilder<STATE | TitleSet>& setTitle(const String& value)
        {
            static_assert(!(STATE & TitleSet), "property title should not be set yet");
            m_result->setTitle(value);
            return castState<TitleSet>();
        }

        SecurityStateExplanationBuilder<STATE | SummarySet>& setSummary(const String& value)
        {
            static_assert(!(STATE & SummarySet), "property summary should not be set yet");
            m_result->setSummary(value);
            return castState<SummarySet>();
        }

        SecurityStateExplanationBuilder<STATE | DescriptionSet>& setDescription(const String& value)
        {
            static_assert(!(STATE & DescriptionSet), "property description should not be set yet");
            m_result->setDescription(value);
            return castState<DescriptionSet>();
        }

        SecurityStateExplanationBuilder<STATE | MixedContentTypeSet>& setMixedContentType(const String& value)
        {
            static_assert(!(STATE & MixedContentTypeSet), "property mixedContentType should not be set yet");
            m_result->setMixedContentType(value);
            return castState<MixedContentTypeSet>();
        }

        SecurityStateExplanationBuilder<STATE | CertificateSet>& setCertificate(std::unique_ptr<protocol::Array<String>> value)
        {
            static_assert(!(STATE & CertificateSet), "property certificate should not be set yet");
            m_result->setCertificate(std::move(value));
            return castState<CertificateSet>();
        }

        SecurityStateExplanationBuilder<STATE>& setRecommendations(std::unique_ptr<protocol::Array<String>> value)
        {
            m_result->setRecommendations(std::move(value));
            return *this;
        }

        std::unique_ptr<SecurityStateExplanation> build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class SecurityStateExplanation;
        SecurityStateExplanationBuilder() : m_result(new SecurityStateExplanation()) { }

        template<int STEP> SecurityStateExplanationBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<SecurityStateExplanationBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Security::SecurityStateExplanation> m_result;
    };

    static SecurityStateExplanationBuilder<0> create()
    {
        return SecurityStateExplanationBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    SecurityStateExplanation()
    {
    }

    String m_securityState;
    String m_title;
    String m_summary;
    String m_description;
    String m_mixedContentType;
    std::unique_ptr<protocol::Array<String>> m_certificate;
    Maybe<protocol::Array<String>> m_recommendations;
};


class  InsecureContentStatus : public ::v8_crdtp::ProtocolObject<InsecureContentStatus> {
public:
    ~InsecureContentStatus() override { }

    bool getRanMixedContent() { return m_ranMixedContent; }
    void setRanMixedContent(bool value) { m_ranMixedContent = value; }

    bool getDisplayedMixedContent() { return m_displayedMixedContent; }
    void setDisplayedMixedContent(bool value) { m_displayedMixedContent = value; }

    bool getContainedMixedForm() { return m_containedMixedForm; }
    void setContainedMixedForm(bool value) { m_containedMixedForm = value; }

    bool getRanContentWithCertErrors() { return m_ranContentWithCertErrors; }
    void setRanContentWithCertErrors(bool value) { m_ranContentWithCertErrors = value; }

    bool getDisplayedContentWithCertErrors() { return m_displayedContentWithCertErrors; }
    void setDisplayedContentWithCertErrors(bool value) { m_displayedContentWithCertErrors = value; }

    String getRanInsecureContentStyle() { return m_ranInsecureContentStyle; }
    void setRanInsecureContentStyle(const String& value) { m_ranInsecureContentStyle = value; }

    String getDisplayedInsecureContentStyle() { return m_displayedInsecureContentStyle; }
    void setDisplayedInsecureContentStyle(const String& value) { m_displayedInsecureContentStyle = value; }

    template<int STATE>
    class InsecureContentStatusBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            RanMixedContentSet = 1 << 1,
            DisplayedMixedContentSet = 1 << 2,
            ContainedMixedFormSet = 1 << 3,
            RanContentWithCertErrorsSet = 1 << 4,
            DisplayedContentWithCertErrorsSet = 1 << 5,
            RanInsecureContentStyleSet = 1 << 6,
            DisplayedInsecureContentStyleSet = 1 << 7,
            AllFieldsSet = (RanMixedContentSet | DisplayedMixedContentSet | ContainedMixedFormSet | RanContentWithCertErrorsSet | DisplayedContentWithCertErrorsSet | RanInsecureContentStyleSet | DisplayedInsecureContentStyleSet | 0)};


        InsecureContentStatusBuilder<STATE | RanMixedContentSet>& setRanMixedContent(bool value)
        {
            static_assert(!(STATE & RanMixedContentSet), "property ranMixedContent should not be set yet");
            m_result->setRanMixedContent(value);
            return castState<RanMixedContentSet>();
        }

        InsecureContentStatusBuilder<STATE | DisplayedMixedContentSet>& setDisplayedMixedContent(bool value)
        {
            static_assert(!(STATE & DisplayedMixedContentSet), "property displayedMixedContent should not be set yet");
            m_result->setDisplayedMixedContent(value);
            return castState<DisplayedMixedContentSet>();
        }

        InsecureContentStatusBuilder<STATE | ContainedMixedFormSet>& setContainedMixedForm(bool value)
        {
            static_assert(!(STATE & ContainedMixedFormSet), "property containedMixedForm should not be set yet");
            m_result->setContainedMixedForm(value);
            return castState<ContainedMixedFormSet>();
        }

        InsecureContentStatusBuilder<STATE | RanContentWithCertErrorsSet>& setRanContentWithCertErrors(bool value)
        {
            static_assert(!(STATE & RanContentWithCertErrorsSet), "property ranContentWithCertErrors should not be set yet");
            m_result->setRanContentWithCertErrors(value);
            return castState<RanContentWithCertErrorsSet>();
        }

        InsecureContentStatusBuilder<STATE | DisplayedContentWithCertErrorsSet>& setDisplayedContentWithCertErrors(bool value)
        {
            static_assert(!(STATE & DisplayedContentWithCertErrorsSet), "property displayedContentWithCertErrors should not be set yet");
            m_result->setDisplayedContentWithCertErrors(value);
            return castState<DisplayedContentWithCertErrorsSet>();
        }

        InsecureContentStatusBuilder<STATE | RanInsecureContentStyleSet>& setRanInsecureContentStyle(const String& value)
        {
            static_assert(!(STATE & RanInsecureContentStyleSet), "property ranInsecureContentStyle should not be set yet");
            m_result->setRanInsecureContentStyle(value);
            return castState<RanInsecureContentStyleSet>();
        }

        InsecureContentStatusBuilder<STATE | DisplayedInsecureContentStyleSet>& setDisplayedInsecureContentStyle(const String& value)
        {
            static_assert(!(STATE & DisplayedInsecureContentStyleSet), "property displayedInsecureContentStyle should not be set yet");
            m_result->setDisplayedInsecureContentStyle(value);
            return castState<DisplayedInsecureContentStyleSet>();
        }

        std::unique_ptr<InsecureContentStatus> build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class InsecureContentStatus;
        InsecureContentStatusBuilder() : m_result(new InsecureContentStatus()) { }

        template<int STEP> InsecureContentStatusBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<InsecureContentStatusBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Security::InsecureContentStatus> m_result;
    };

    static InsecureContentStatusBuilder<0> create()
    {
        return InsecureContentStatusBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    InsecureContentStatus()
    {
          m_ranMixedContent = false;
          m_displayedMixedContent = false;
          m_containedMixedForm = false;
          m_ranContentWithCertErrors = false;
          m_displayedContentWithCertErrors = false;
    }

    bool m_ranMixedContent;
    bool m_displayedMixedContent;
    bool m_containedMixedForm;
    bool m_ranContentWithCertErrors;
    bool m_displayedContentWithCertErrors;
    String m_ranInsecureContentStyle;
    String m_displayedInsecureContentStyle;
};


// ------------- Backend interface.

class  Backend {
public:
    virtual ~Backend() { }


    virtual DispatchResponse disable()
    {
        return DispatchResponse::Success();
    }
};

// ------------- Frontend interface.

class  Frontend {
public:
  explicit Frontend(FrontendChannel* frontend_channel) : frontend_channel_(frontend_channel) {}
    void certificateError(int eventId, const String& errorType, const String& requestURL);
    void securityStateChanged(const String& securityState, bool schemeIsCryptographic, std::unique_ptr<protocol::Array<protocol::Security::SecurityStateExplanation>> explanations, std::unique_ptr<protocol::Security::InsecureContentStatus> insecureContentStatus, Maybe<String> summary = Maybe<String>());

  void flush();
  void sendRawNotification(std::unique_ptr<Serializable>);
 private:
  FrontendChannel* frontend_channel_;
};

// ------------- Dispatcher.

class  Dispatcher {
public:
    static void wire(UberDispatcher*, Backend*);

private:
    Dispatcher() { }
};

// ------------- Metainfo.

class  Metainfo {
public:
    using BackendClass = Backend;
    using FrontendClass = Frontend;
    using DispatcherClass = Dispatcher;
    static const char domainName[];
    static const char commandPrefix[];
    static const char version[];
};

} // namespace Security
} // namespace v8_inspector
} // namespace protocol

#endif // !defined(v8_inspector_protocol_Security_h)
